import math
import pygame
from robot import Ground
import numpy as np
from robot import *

MAP_DIMENSIONS = (600,1200)
ROBOT = "meteor.png"
BG = "white.png"
WALLS = ["upper_wall.png", "side_wall.png"]
# Define el mapa a recorrer
gnd = Ground(MAP_DIMENSIONS, ROBOT, BG) #robott.png, mapa1_red.png
walls = [Wall(WALLS[0], 0, 0), Wall(WALLS[0], 0, 550), Wall(WALLS[1], 0, 50), Wall(WALLS[1], 1150, 50)]

gnd.map.blit(gnd.map_img, (0,0))
for w in walls:
    w.draw(gnd.map)

# robot
robot_position = [(300,400), (400,400), (800,350), (400,400), (500,400)] # (300,400), (700,350), (800,350), (400,400), (500,400)
number_of_robots = 1
robots = []
for n in range(number_of_robots):
    robots.append(Robot(ROBOT, robot_position[n], 0.01*3779.52))

obstacles = walls+robots

# Define las características del sensor
sensor_range = 70, math.radians(10)  # 250, 20 .... 70,10
sensor1 = Sensor(sensor_range, gnd.map)
sensor2 = Sensor(sensor_range, gnd.map)
sensor3 = Sensor(sensor_range, gnd.map)

dt = 0
last_time = pygame.time.get_ticks()

running = True

theta = math.radians(0)
g = 0
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    dt = (pygame.time.get_ticks()-last_time)/1000
    last_time = pygame.time.get_ticks()

    gnd.map.blit(gnd.map_img, (0,0))
    for w in walls:
        w.draw(gnd.map)

    
    
    
    for n in range(number_of_robots):
        robots[n].kinematics(dt)
        robots[n].draw(robots[n].x, robots[n].y, np.pi, gnd.map)
        #for obstacle in obstacles:
        #    if robots[n].rect.colliderect(obstacle.rect) and robots[n] != obstacle:
        #        pygame.draw.rect(gnd.map, (255,0,0), robots[n].rect, 2)
    


    #for n in range(number_of_robots):
    #    robots[n].kinematics(dt)
    #    gnd.draw_robot(robots[n].x, robots[n].y, np.pi+theta+math.radians(g)) # angulos 150,30,270
    #    point_cloud1 = sensor1.sense_obstacles(robots[n].x, robots[n].y, (22,-12), 150+math.degrees(theta)+g)  # 15,-10, 150 ; 20,-12, 30; 20,-20, 270
    ##    point_cloud2 = sensor2.sense_obstacles(robots[n].x, robots[n].y, (20,-12), 30+math.degrees(theta)+g)
    #    point_cloud3 = sensor3.sense_obstacles(robots[n].x, robots[n].y, (20,-23), 270+math.degrees(theta)+g)
    #    point_cloud = point_cloud3 + point_cloud2 + point_cloud1
    #    #print(point_cloud)
        #print("\n\n")
    #    robots[n].avoid_obstacles(point_cloud)
    #    gnd.draw_sensor_data(point_cloud)
    #    g += 1
    pygame.display.update()
    



import pygame
import math
import numpy as np
import spritesheet

def distance(x,y):
    return np.linalg.norm(np.array(x)-np.array(y))

class Ground:
    def __init__(self, dimentions, robot_img, map_img):
        pygame.init()

        # terreno
        self.robot = pygame.image.load(robot_img)
        self.map_img = pygame.image.load(map_img)
        # dimensiones
        self.height, self.width = dimentions

        # configuración de la ventana
        pygame.display.set_caption("Map")
        self.map = pygame.display.set_mode((self.width, self.height))
        self.map.blit(self.map_img, (0,0))

        rect = self.robot.get_rect()
        self.map.blit(self.robot, rect)

    def draw_robot(self, x, y, theta):
        rotated = pygame.transform.rotozoom(self.robot, math.degrees(theta), 1) # math.degrees(np.pi)
        rect = rotated.get_rect(center = (x,y))
        self.map.blit(rotated, rect)

    
    
    def draw_sensor_data(self, point_cloud):
        for point in point_cloud:
            pygame.draw.circle(self.map, (0,255,0), point, 3, 0)

class Obstacle:
    def __init__(self, image):
        self.image = pygame.image.load(image)
        self.rect = self.image.get_rect()
        self.mask = pygame.mask.from_surface(self.image)
        
    def draw(self, gnd):
        gnd.blit(self.image, self.rect)
      

class Robot(Obstacle):
    def __init__(self, image, startPos, width):
        super().__init__(image)
        self.m2p = 3779.52 # meters to pixels
        self.w = width
        self.x = startPos[0]
        self.y = startPos[1]
        self.theta = 0
        self.direction = np.array([-0.00001,1])

        self.v = 0.008*self.m2p # metros/s
        self.minSpeed = 0.02*self.m2p
        self.min_obs_dist = 70 # pixeles 70
        

    def avoid_obstacles(self, point_cloud):
        closest_obs = None
        dist = np.inf

        if len(point_cloud) > 1:
            for point in point_cloud:
                if dist > distance([self.x, self.y], point):
                    dist = distance([self.x, self.y], point)
                    closest_obs = dist

            if closest_obs < self.min_obs_dist:
                self.obstacles = np.sum(np.array(point_cloud), axis = 0)/len(point_cloud)
                self.direction = -(self.obstacles - np.array([self.x, self.y]))
                self.theta = np.arctan(abs(self.direction[1]/self.direction[0]))*180/np.pi
    
    def kinematics(self, dt):
        self.x += (self.direction[0]/abs(self.direction[0]))*(self.v)*math.cos(math.radians(self.theta))*dt
        self.y += (self.direction[1]/abs(self.direction[1]))*(self.v)*math.sin(math.radians(self.theta))*dt
        self.v = self.minSpeed

    def draw(self, x, y, theta, gnd):
        rotated = pygame.transform.rotozoom(self.image, math.degrees(theta), 1) # math.degrees(np.pi)
        self.rect = rotated.get_rect(center = (x,y))
        gnd.blit(rotated, self.rect)

class Wall(Obstacle):
    def __init__(self, image, x, y):
        super().__init__(image)
        self.rect.x = x
        self.rect.y = y



class Sensor:
    def __init__(self, sensor_range, py_map):
        self.sensor_range = sensor_range
        self.map_width, self.map_height = pygame.display.get_surface().get_size()
        self.map = py_map

    def sense_obstacles(self, x, y, pos, sensor_angle):
        obstacles = []
        x1, y1 = x+pos[0]*np.cos(math.radians(sensor_angle)), y+pos[1]*np.sin(math.radians(sensor_angle))
        start_angle = math.radians(sensor_angle) - self.sensor_range[1]
        end_angle = math.radians(sensor_angle) + self.sensor_range[1]
        points = 40
        for angle in np.linspace(start_angle, end_angle, points, False):
            x2 = x1 + self.sensor_range[0] * math.cos(angle)
            y2 = y1 - self.sensor_range[0] * math.sin(angle)
            for i in range(0,points):
                u = i / points
                x = int(x2*u + x1*(1-u))
                y = int(y2*u + y1*(1-u))
                if 0 < x < self.map_width and 0 < y < self.map_height:
                    color = self.map.get_at((x,y))
                    self.map.set_at((x,y), (255,0, 0))
                    if (((color[0], color[1], color[2]) == (0,0,0))):
                        obstacles.append([x,y])
                        break
        return obstacles

