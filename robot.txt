import pygame
import math
import numpy as np

def distance(x,y):
    return np.linalg.norm(np.array(x)-np.array(y))


class Robot:
    def __init__(self, startPos, width):
        self.m2p = 3779.52 # meters to pixels
        self.w = width
        self.x = startPos[0]
        self.y = startPos[1]
        self.theta = 0

        self.vl = 0.01*self.m2p # metros/s
        self.vr = 0.01*self.m2p
        
        self.maxSpeed = 0.02*self.m2p
        self.minSpeed = 0.02*self.m2p

        self.min_obs_dist = 100 # pixeles
        self.count_down = 5 # segundos

    def avoid_obstacles(self, point_cloud, dt):
        closest_obs = None
        dist = np.inf

        if len(point_cloud) > 1:
            for point in point_cloud:
                if dist > distance([self.x, self.y], point):
                    dist = distance([self.x, self.y], point)
                    closest_obs = (point, dist)

            if closest_obs[1] < self.min_obs_dist and self.count_down > 0:
                self.count_down -= dt
                self.move_backward()
            else:
                self.count_down = 5
                self.move_forward()

    def move_backward(self):
        self.vr = -self.minSpeed
        self.vl = -self.minSpeed/2

    def move_forward(self):
        self.vr = self.minSpeed
        self.vl = self.minSpeed

    def kinematics(self, dt):
        self.x += ((self.vl+self.vr)/2)*math.cos(self.theta)*dt
        self.y -= ((self.vl+self.vr)/2)*math.sin(self.theta)*dt
        self.theta += (self.vr-self.vl)/self.w*dt

        if self.theta > 2*math.pi or self.theta < -2*math.pi:
            self.theta = 0
        
        self.vr = max(min(self.maxSpeed, self.vr), self.minSpeed)
        self.vl = max(min(self.maxSpeed, self.vl), self.minSpeed)


class Ground:
    def __init__(self, dimentions, robot_img, map_img):
        pygame.init()
        self.black = (0,0,0)
        self.white = (255,255,255)
        self.green = (0,255,0)
        self.blue = (0,0,255)
        self.red = (255,0,0)
        self.yellow = (255,255,0)

        # terreno
        self.robot = pygame.image.load(robot_img)
        self.map_img = pygame.image.load(map_img)

        # dimensiones
        self.height, self.width = dimentions

        # configuraciÃ³n de la ventana
        pygame.display.set_caption("Map")
        self.map = pygame.display.set_mode((self.width, self.height))
        self.map.blit(self.map_img, (0,0))

    def draw_robot(self, x, y, theta):
        rotated = pygame.transform.rotozoom(self.robot, math.degrees(theta), 1)
        rect = rotated.get_rect(center = (x,y))
        self.map.blit(rotated, rect)

    def draw_sensor_data(self, point_cloud):
        for point in point_cloud:
            pygame.draw.circle(self.map, self.green, point, 3, 0)

class Sensor:
    def __init__(self, sensor_range, py_map):
        self.sensor_range = sensor_range
        self.map_width, self.map_height = pygame.display.get_surface().get_size()
        self.map = py_map

    def sense_obstacles(self, x, y, theta):
        obstacles = []
        x1, y1 = x, y
        start_angle = theta - self.sensor_range[1]
        end_angle = theta + self.sensor_range[1]
        for angle in np.linspace(start_angle, end_angle, 10, False):
            x2 = x1 + self.sensor_range[0] * math.cos(angle)
            y2 = y1 - self.sensor_range[0] * math.sin(angle)
            for i in range(0,100):
                u = i / 100
                x = int(x2*u + x1*(1-u))
                y = int(y2*u + y1*(1-u))
                if 0 < x < self.map_width and 0 < y < self.map_height:
                    color = self.map.get_at((x,y))
                    self.map.set_at((x,y), (255,0, 0))
                    if (color[0], color[1], color[2]) == (0,0,0):
                        obstacles.append([x,y])
                        break
                        
        return obstacles



import math
import pygame
from robot import Ground
import numpy as np
from robot import *

MAP_DIMENSIONS = (600,1200)

gnd = Ground(MAP_DIMENSIONS, "robott.png", "map1.png")
#n_robots = 1
#robot_position = np.random.rand(n_robots,2)*550


# robot
robot_position = (400,200)
robot = Robot(robot_position, 0.01*3779.52)

sensor_range = 250, math.radians(40)
sensor = Sensor(sensor_range, gnd.map)

dt = 0
last_time = pygame.time.get_ticks()

running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    dt = (pygame.time.get_ticks()-last_time)/1000
    last_time = pygame.time.get_ticks()

    gnd.map.blit(gnd.map_img, (0,0))
    robot.kinematics(dt)
    gnd.draw_robot(robot.x, robot.y, robot.theta)
    point_cloud = sensor.sense_obstacles(robot.x, robot.y, robot.theta)
    robot.avoid_obstacles(point_cloud, dt)
    gnd.draw_sensor_data(point_cloud)
    pygame.display.update()
    